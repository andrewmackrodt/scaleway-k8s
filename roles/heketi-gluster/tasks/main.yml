---
- name: Installing glusterfs.client and jq
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - glusterfs-client
    - jq
  register: result
  retries: 3
  until: result is success

- name: modprobe
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - dm_thin_pool

- name: /etc/modules dm_thin_pool
  lineinfile:
    path: /etc/modules
    line: 'dm_thin_pool'

- name: Installing Heketi on master nodes
  get_url:
    url: "{{ heketi_sources }}"
    dest: /tmp/heketi.tar.gz
  when: "'masters' in group_names"

- name: Unarchive Heketi
  unarchive:
    src: /tmp/heketi.tar.gz
    dest: /usr/share
    remote_src: yes
  when: "'masters' in group_names"

- name: Deleting Heketi archive
  file:
    path: /tmp/heketi.tar.gz
    state: absent
  when: "'masters' in group_names"

- name: Getting Heketi version
  command: /usr/share/heketi-client/bin/heketi-cli -v
  register: heketi_version
  when: "'masters' in group_names"

- name: Printing Heketi version
  debug: var=heketi_version
  when: "'masters' in group_names"

- name: Creating gluster and heketi needed directory on workers nodes
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /etc/glusterfs
    - /var/lib/misc/glusterfsd
    - /var/lib/heketi
    - /var/lib/glusterd
    - /var/log/glusterfs
  when: "'workers' in group_names"

- name: Getting node labels
  command: "kubectl get nodes -l storagenode=glusterfs"
  register: nodes_gluster
  when: inventory_hostname == groups["masters"][0]

- name: Printing nodes
  debug: var=nodes_gluster
  when: inventory_hostname == groups["masters"][0]

- name: Labelling workers nodes with storagenode=glusterfs
  command: "kubectl label node {{ item }} storagenode=glusterfs"
  with_items:
    - "{{ groups['workers'] }}"
  when:
    - inventory_hostname == groups["masters"][0]
    - '"{{ item }}" not in nodes_gluster.stdout'

- name: Copying manifests files
  copy:
    src: "glusterfs-daemonset.yml"
    dest: "/tmp/glusterfs-daemonset.yml"
  when: inventory_hostname == groups["masters"][0]

- name: Deploying glusterfs
  kube:
    name: "glusterfs"
    resource: "ds"
    filename: "/tmp/glusterfs-daemonset.yml"
    state: latest
  when: inventory_hostname == groups["masters"][0]

- name: Removing manifest
  file:
    path: "/tmp/gluster-daemonset.yml"
    state: absent
  when: inventory_hostname == groups["masters"][0]

- name: Getting secrets
  command: kubectl get secrets
  register: secrets
  when:
    - inventory_hostname == groups["masters"][0]

- name: Copying manifests heketi.json 
  copy:
    src: "heketi.json"
    dest: "/tmp/heketi.json"
  when: inventory_hostname == groups["masters"][0]

- name: Creating secret
  command: kubectl create secret generic heketi-config-secret --from-file=/tmp/heketi.json
  when:
    - inventory_hostname == groups["masters"][0]
    - '"heketi-config-secret" not in secrets.stdout'

- name: Deleting heekti.json
  file:
    path: /tmp/heketi.json
    state: absent
  when: inventory_hostname == groups["masters"][0]

- name: Copying manifests files
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
  with_items:
    - heketi-sa.yml
    - heketi-clusterrolebinding.yml
    - heketi-svc.yml
    - heketi-deployment.yml
  when: inventory_hostname == groups["masters"][0]

- name: Deploying Heketi
  kube:
    name: "{{ item.name }}"
    resource: "{{ item.resource }}"
    filename: "{{ item.filename }}"
    state: latest
  with_items:
    - { 'name': 'heketi', 'resource': 'sa', 'filename': '/tmp/heketi-sa.yml' }
    - { 'name': 'heketi', 'resource': 'clusterrolebinding', 'filename': '/tmp/heketi-clusterrolebinding.yml' }
    - { 'name': 'heketi', 'resource': 'deploy', 'filename': '/tmp/heketi-deployment.yml' }
    - { 'name': 'heketi', 'resource': 'svc', 'filename': '/tmp/heketi-svc.yml' }
  when: inventory_hostname == groups["masters"][0]

- name: Removing manifest
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - heketi-sa.yml
    - heketi-deployment.yml
    - heketi-svc.yml
    - heketi-clusterrole.yml
    - heketi-clusterrolebinding.yml
  when: inventory_hostname == groups["masters"][0]

- name: Templating gluster topology
  template:
    src: "topology.json.j2"
    dest: "/tmp/topology.json"
  when: inventory_hostname == groups["masters"][0]

- name: Pausing
  pause:
    minutes: 3

- name: Getting number of nodes in the gluster
  shell: "/usr/share/heketi-client/bin/heketi-cli node list | wc -l"
  register: number_of_nodes
  ignore_errors: True
  environment:
    - HEKETI_CLI_SERVER: 'http://{{ vpn_ip }}:30001'
  when: inventory_hostname == groups["masters"][0]

- name: Printing number of nodes in the gluster
  debug: var=number_of_nodes.stdout
  when: inventory_hostname == groups["masters"][0]

- name: Printing number of workers
  debug: var=groups.workers|length
  when: inventory_hostname == groups["masters"][0]

- name: Pausing
  pause:
    minutes: 3

- name: Creating topology
  command: /usr/share/heketi-client/bin/heketi-cli topology load --json=/tmp/topology.json
  register: heketi_topo
  ignore_errors: True
  environment:
    - HEKETI_CLI_SERVER: 'http://{{ vpn_ip }}:30001'
  when:
    - inventory_hostname == groups["masters"][0]
    - number_of_nodes.stdout|int < groups.workers|length

- name: Getting topology output
  debug: var=heketi_topo
  when: inventory_hostname == groups["masters"][0]

- name: Stating heketi-storage.json
  stat:
    path: /root/heketi-storage.json
  register: heketistoragefile
  when: inventory_hostname == groups["masters"][0]

- name: setup-openshift-heketi-storage
  command: /usr/share/heketi-client/bin/heketi-cli setup-openshift-heketi-storage
  register: setup-openshift-heketi-storage
  environment:
    - HEKETI_CLI_SERVER: 'http://{{ vpn_ip }}:30001'
  when:
    - inventory_hostname == groups["masters"][0]
    - heketistoragefile.stat.exists == False

- name: Getting setup-openshift-heketi-storage
  debug: var=setup-openshift-heketi-storage
  when:
    - inventory_hostname == groups["masters"][0]
    - heketistoragefile.stat.exists == False

- name: Applying heketi-storage.json
  command: kubectl apply -f /root/heketi-storage.json
  register: heketistoragekubectl
  when:
    - inventory_hostname == groups["masters"][0]
    - heketistoragefile.stat.exists == True

- name: Getting heketi-storage output
  debug: var=heketistoragekubectl
  when:
    - inventory_hostname == groups["masters"][0]

- name: Wait for heketi job to finish
  shell: "kubectl get jobs heketi-storage-copy-job | tail -1 | awk '{print $2}'"
  register: result
  until: result.stdout|int == 1
  retries: 200
  delay: 10
  when:
    - inventory_hostname == groups["masters"][0]

- name: Deleting temporary heketi
  command: kubectl delete all,service,jobs,deployment,secret --selector="deploy-heketi"
  ignore_errors: True
  when:
    - inventory_hostname == groups["masters"][0]

- name: Copying manifests files
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
  with_items:
    - heketi-deploy.yml
    - heketi-deploy-svc.yml
  when: inventory_hostname == groups["masters"][0]

- name: Deploying Heketi
  kube:
    name: "{{ item.name }}"
    resource: "{{ item.resource }}"
    filename: "{{ item.filename }}"
    state: latest
  with_items:
    - { 'name': 'heketi', 'resource': 'deploy', 'filename': '/tmp/heketi-deploy.yml' }
    - { 'name': 'heketi', 'resource': 'svc', 'filename': '/tmp/heketi-deploy-svc.yml' }
  when: inventory_hostname == groups["masters"][0]

- name: Removing manifest
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - heketi-deploy.yml
    - heketi-deploy-svc.yml
  when: inventory_hostname == groups["masters"][0]

- name: Getting heketi ClusterIP to configure storageclass
  shell: "kubectl get svc heketi -o json | jq -r  '.spec.clusterIP'"
  register: heketi_ip
  when: inventory_hostname == groups["masters"][0]

- name: Templating storage class
  template:
     src: heketi-storageclass.yml.j2
     dest: /tmp/heketi-storageclass.yml
  when: inventory_hostname == groups["masters"][0]

- name: Creating gluster storageclass
  kube:
    name: "gluster"
    resource: "storageclass"
    filename: "/tmp/heketi-storageclass.yml"
  when: inventory_hostname == groups["masters"][0]

- name: Removing manifest
  file:
    path: "/tmp/heketi-storageclass.yml"
    state: absent
  when: inventory_hostname == groups["masters"][0]
