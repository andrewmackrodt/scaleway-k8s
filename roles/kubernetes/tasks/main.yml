---
- name: Kubernetes installation
  block:

  - name: Get the kernel revision
    shell: "uname -r"
    register: kernel
    changed_when: False

  - name: Install kernel headers
    apt:
      state: present
      name: "{{ 'linux-image-' + kernel.stdout }}"
    register: result
    retries: 3
    until: result is success

  - name: Fixing nasty bug
    shell: "iptables -P FORWARD ACCEPT"
    ignore_errors: True

  - name: Adding Kubernetes official gpg key (without proxy)
    apt_key:
      url: "{{ kubernetes_apt_key }}"
      state: present
    when: "'proxy' in group_names"

  - name: Adding Kubernetes official gpg key (with proxy)
    apt_key:
      url: "{{ kubernetes_apt_key }}"
      state: present
    environment:
      https_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
    when: "'workers' in group_names or 'masters' in group_names"

  - name: Setting Kubernetes repository depending Ubuntu version
    set_fact:
      kubernetes_repository: "deb http://apt.kubernetes.io/ kubernetes-{{ kubernetes_release }} {{ kubernetes_apt_channel }}"

  - name: Checking Kubernetes repostiory
    debug: var=kubernetes_repository

  - name: Adding Kubernetes repository
    apt_repository:
      repo: "{{ kubernetes_repository }}"
      state: present
      filename: 'kubernetes'

  - name: Installing kubernetes core components (kubectl, kubelet ...)
    apt:
      name: "{{ item }}"
      state: latest
    with_items:
      - kubelet
      - kubeadm
      - kubectl
      - kubernetes-cni
    register: result
    retries: 3
    until: result is success

  - name: Checking if first master was initialized
    stat:
      path: /etc/kubernetes
    register: kubernetes_directory
    when: inventory_hostname == groups["masters"][0]

  - name: Kubeadm init on first master
    shell: "kubeadm init --apiserver-advertise-address={{ vpn_ip }} --pod-network-cidr={{ flannel_cidr }} --kubernetes-version {{ kubernetes_version }}"
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Creating .kube file in $HOME
    file:
      path: ~/.kube
      state: directory
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Copying /etc/kubernetes/admin.conf to ~/.kube/config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: ~/.kube/config
      remote_src: yes
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Running first kubectl
    shell: "kubectl get nodes"
    register: first_kubectl
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Checking kubectl
    debug: var=first_kubectl
    when:
      - inventory_hostname == groups["masters"][0]

  # flannel deployement
  - name: Getting calico manifest
    get_url:
      url: "{{ flannel_manifest }}"
      dest: /tmp/flannel.yml
    environment:
      # calico manifest is downloaded via http
      http_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
      https_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Checking if flannel deploy exists
    shell: "kubectl get deploy --namespace=kube-system  flannel"
    ignore_errors: True
    register: calico_deployment
    when: inventory_hostname == groups["masters"][0]

  - name: Creating flannel
    shell: "kubectl create -f /tmp/flannel.yml"
    when:
      - inventory_hostname == groups["masters"][0]

  #- name: Getting calico manifest
  #  get_url:
  #    url: "{{ calico_manifest }}"
  #    dest: /tmp/calico.yml
  #  environment:
  #    # calico manifest is downloaded via http
  #    http_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
  #    https_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
  #  when:
  #    - inventory_hostname == groups["masters"][0]

  #- name: Checking if calico deploy exists
  #  shell: "kubectl get deploy --namespace=kube-system  calico-policy-controller"
  #  ignore_errors: True
  #  register: calico_deployment
  #  when: inventory_hostname == groups["masters"][0]

  #- name: Creating calico
  #  shell: "kubectl create -f /tmp/calico.yml"
  #  when:
  #    - inventory_hostname == groups["masters"][0]
  #    - calico_deployment.rc != 0

  - name: Getting token
    shell: "kubeadm token list | tail -f | awk '{print $1}'"
    register: token
    when:
      - inventory_hostname == groups["masters"][0]

  - name: Checking if kube-proxy is Running
    shell: "ps -ef | grep [k]ube-proxy"
    register: kube_proxy_running
    ignore_errors: True
    when: inventory_hostname != groups["masters"]

  - name: Joining cluster on other nodes
    shell: "kubeadm join --token={{ hostvars[groups['masters'][0]]['token'].stdout_lines[1] }} {{ hostvars[groups['masters'][0]]['vpn_ip'] }}:{{ kubernetes_port }}"
    when:
     - inventory_hostname != groups["masters"][0]
     - "'/usr/local/bin/kube-proxy' not in kube_proxy_running.stdout"

  when:
    - ansible_distribution == "Ubuntu"
    - groups['masters']|length == 1
